#!/usr/bin/env python
from os import system, WEXITSTATUS
from numpy import array

class CMDCLR:
    HEADER, OKBLUE, OKGREEN = '\033[95m', '\033[94m', '\033[92m'
    WARNING, FAIL, ENDC = '\033[93m', '\033[91m', '\033[0m'
    BOLD, UNDERLINE = '\033[1m', '\033[4m'

def process_output(output_file='output.txt'):
    open_output_file = open(output_file)
    header_string = CMDCLR.HEADER + CMDCLR.BOLD + CMDCLR.UNDERLINE
    header_string += '--'*75 + '\n'
    header_string += 'operand1\t+\toperand2\tCLANG\t\tNASM\t\tBUILT-IN'
    header_string += '\tABSOLUTE ERROR:\t\tCLANG\t\t\t\tNASM'
    header_string += '\n'+'--'*75
    print(header_string + CMDCLR.ENDC)

    for row in open_output_file:
        row = array([float(ele) for ele in row.strip('\n').split(',')])
        _print_output(row[0], row[1], row[2], row[3], row[4])

def _print_output(a, b, x, y, z):
    """
    this function is responsible for printing the results generated by the c
    addf function where:
        > a = the first operand from the file
        > b = the first operand from the file
        > c = the result computed by c = a + b
        > x = the result computed by the addf function
    this function also prints the absolute error between the c computed value
    and the value computed by addf by the following fomula:
    abs_error = |xc - xa|, where: > xc = the computed value(computed by addf)
                                  > xa = the actual value (computed by c)
    """
    absolute_error = lambda addf_c, c_res: abs(addf_c - c_res)

    abserr1 = absolute_error(x, z)
    abserr2 = absolute_error(y, z)
    warn1 = (CMDCLR.FAIL,'BAD') if abserr1 > 0.000099 else (CMDCLR.OKGREEN,'OKAY')
    warn2 = (CMDCLR.FAIL,'BAD') if abserr2 > 0.000099 else (CMDCLR.OKGREEN,'OKAY')

    results_string = '{:15.8f} + {:15.8f} ='.format(a, b)
    results_string += CMDCLR.OKBLUE+'({:15.8f} {:15.8f}'.format(x, y)
    results_string += CMDCLR.BOLD+CMDCLR.OKBLUE+'{:15.8f})'.format(z)
    results_string += CMDCLR.WARNING+'\t|xc-xa| = {:.8f}\t'.format(abserr1)+CMDCLR.ENDC
    results_string += CMDCLR.BOLD+warn1[0]+warn1[1]+CMDCLR.ENDC
    results_string += CMDCLR.WARNING+'\t|xc-xa| = {:.8f}\t'.format(abserr2)+CMDCLR.ENDC
    results_string += CMDCLR.BOLD+warn2[0]+warn2[1]+CMDCLR.ENDC

    print(results_string)

if __name__ == '__main__':
    if WEXITSTATUS(system('make clean&&make all')) == 0:
        system('clear')
        system('./fadd ../test/test_cases.txt > output.txt')
        process_output()
        system('rm output.txt')
    else:
        print(CMDCLR.BOLD+CMDCLR.FAIL+\
              'BAD COMPILE: FIX the errors and recompile'+\
              CMDCLR.OKGREEN+' tutorial06.c')
else:
    from sys import exit
    exit('USAGE: ./compile')
